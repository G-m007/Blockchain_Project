/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace RealEstateBuy {
  export type SellOrderStruct = {
    orderId: BigNumberish;
    propertyId: BigNumberish;
    seller: AddressLike;
    tokenAmount: BigNumberish;
    pricePerToken: BigNumberish;
    isActive: boolean;
  };

  export type SellOrderStructOutput = [
    orderId: bigint,
    propertyId: bigint,
    seller: string,
    tokenAmount: bigint,
    pricePerToken: bigint,
    isActive: boolean
  ] & {
    orderId: bigint;
    propertyId: bigint;
    seller: string;
    tokenAmount: bigint;
    pricePerToken: bigint;
    isActive: boolean;
  };
}

export interface RealEstateBuyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyFromSellOrder"
      | "cancelSellOrder"
      | "createProperty"
      | "createSellOrder"
      | "getAllPropertiesCount"
      | "getAllSellOrders"
      | "getMySellOrders"
      | "getMyTokens"
      | "getPropertyDetails"
      | "getPropertyRentalInfo"
      | "getPropertySellOrders"
      | "getRentalEarnings"
      | "payRent"
      | "propertiesList"
      | "purchasePropertyTokens"
      | "rentalEarnings"
      | "sellOrders"
      | "sellPropertyTokens"
      | "setPropertyRentStatus"
      | "tokenOwnership"
      | "withdrawRentalEarnings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PropertyCreated"
      | "PropertyPurchased"
      | "PropertyRentStatusChanged"
      | "PropertySold"
      | "PropertyUpdated"
      | "RentPaid"
      | "RentWithdrawn"
      | "SellOrderCancelled"
      | "SellOrderCreated"
      | "SellOrderFulfilled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyFromSellOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSellOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProperty",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSellOrder",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPropertiesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSellOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMySellOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertyDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertyRentalInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertySellOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRentalEarnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payRent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertiesList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasePropertyTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentalEarnings",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellPropertyTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPropertyRentStatus",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnership",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRentalEarnings",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyFromSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPropertiesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSellOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMySellOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertyDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertyRentalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertySellOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRentalEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payRent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertiesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasePropertyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentalEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellPropertyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPropertyRentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRentalEarnings",
    data: BytesLike
  ): Result;
}

export namespace PropertyCreatedEvent {
  export type InputTuple = [
    propertyId: BigNumberish,
    name: string,
    location: string,
    description: string,
    imageURI: string,
    totalSupply: BigNumberish,
    totalNumberOfTokens: BigNumberish,
    pricePerToken: BigNumberish
  ];
  export type OutputTuple = [
    propertyId: bigint,
    name: string,
    location: string,
    description: string,
    imageURI: string,
    totalSupply: bigint,
    totalNumberOfTokens: bigint,
    pricePerToken: bigint
  ];
  export interface OutputObject {
    propertyId: bigint;
    name: string;
    location: string;
    description: string;
    imageURI: string;
    totalSupply: bigint;
    totalNumberOfTokens: bigint;
    pricePerToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyPurchasedEvent {
  export type InputTuple = [
    propertyId: BigNumberish,
    buyer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [propertyId: bigint, buyer: string, amount: bigint];
  export interface OutputObject {
    propertyId: bigint;
    buyer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyRentStatusChangedEvent {
  export type InputTuple = [
    propertyId: BigNumberish,
    isRentable: boolean,
    monthlyRent: BigNumberish
  ];
  export type OutputTuple = [
    propertyId: bigint,
    isRentable: boolean,
    monthlyRent: bigint
  ];
  export interface OutputObject {
    propertyId: bigint;
    isRentable: boolean;
    monthlyRent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertySoldEvent {
  export type InputTuple = [
    propertyId: BigNumberish,
    buyer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [propertyId: bigint, buyer: string, amount: bigint];
  export interface OutputObject {
    propertyId: bigint;
    buyer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyUpdatedEvent {
  export type InputTuple = [
    propertyId: BigNumberish,
    name: string,
    location: string,
    description: string,
    imageURI: string,
    totalSupply: BigNumberish,
    totalNumberOfTokens: BigNumberish,
    pricePerToken: BigNumberish
  ];
  export type OutputTuple = [
    propertyId: bigint,
    name: string,
    location: string,
    description: string,
    imageURI: string,
    totalSupply: bigint,
    totalNumberOfTokens: bigint,
    pricePerToken: bigint
  ];
  export interface OutputObject {
    propertyId: bigint;
    name: string;
    location: string;
    description: string;
    imageURI: string;
    totalSupply: bigint;
    totalNumberOfTokens: bigint;
    pricePerToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentPaidEvent {
  export type InputTuple = [propertyId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [propertyId: bigint, amount: bigint];
  export interface OutputObject {
    propertyId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentWithdrawnEvent {
  export type InputTuple = [
    propertyId: BigNumberish,
    tokenHolder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    propertyId: bigint,
    tokenHolder: string,
    amount: bigint
  ];
  export interface OutputObject {
    propertyId: bigint;
    tokenHolder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellOrderCancelledEvent {
  export type InputTuple = [orderId: BigNumberish];
  export type OutputTuple = [orderId: bigint];
  export interface OutputObject {
    orderId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellOrderCreatedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    propertyId: BigNumberish,
    seller: AddressLike,
    tokenAmount: BigNumberish,
    pricePerToken: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    propertyId: bigint,
    seller: string,
    tokenAmount: bigint,
    pricePerToken: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    propertyId: bigint;
    seller: string;
    tokenAmount: bigint;
    pricePerToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellOrderFulfilledEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    buyer: AddressLike,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    buyer: string,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    buyer: string;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RealEstateBuy extends BaseContract {
  connect(runner?: ContractRunner | null): RealEstateBuy;
  waitForDeployment(): Promise<this>;

  interface: RealEstateBuyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyFromSellOrder: TypedContractMethod<
    [orderId: BigNumberish],
    [void],
    "payable"
  >;

  cancelSellOrder: TypedContractMethod<
    [orderId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createProperty: TypedContractMethod<
    [
      name: string,
      location: string,
      description: string,
      imageURI: string,
      totalCost: BigNumberish,
      totalNumberOfTokens: BigNumberish,
      pricePerToken: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createSellOrder: TypedContractMethod<
    [
      propertyId: BigNumberish,
      tokenAmount: BigNumberish,
      pricePerToken: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getAllPropertiesCount: TypedContractMethod<[], [bigint], "view">;

  getAllSellOrders: TypedContractMethod<
    [],
    [RealEstateBuy.SellOrderStructOutput[]],
    "view"
  >;

  getMySellOrders: TypedContractMethod<
    [],
    [RealEstateBuy.SellOrderStructOutput[]],
    "view"
  >;

  getMyTokens: TypedContractMethod<
    [propertyId: BigNumberish],
    [bigint],
    "view"
  >;

  getPropertyDetails: TypedContractMethod<
    [propertyId: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, bigint, boolean] & {
        name: string;
        location: string;
        description: string;
        imageURI: string;
        totalCost: bigint;
        totalNumberOfTokens: bigint;
        pricePerToken: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getPropertyRentalInfo: TypedContractMethod<
    [propertyId: BigNumberish],
    [
      [boolean, bigint, bigint, bigint] & {
        isRentable: boolean;
        monthlyRent: bigint;
        lastRentPayment: bigint;
        totalRentCollected: bigint;
      }
    ],
    "view"
  >;

  getPropertySellOrders: TypedContractMethod<
    [propertyId: BigNumberish],
    [RealEstateBuy.SellOrderStructOutput[]],
    "view"
  >;

  getRentalEarnings: TypedContractMethod<
    [propertyId: BigNumberish],
    [bigint],
    "view"
  >;

  payRent: TypedContractMethod<[propertyId: BigNumberish], [void], "payable">;

  propertiesList: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        propertyId: bigint;
        name: string;
        location: string;
        description: string;
        imageURI: string;
        totalCost: bigint;
        totalNumberOfTokens: bigint;
        pricePerToken: bigint;
        isActive: boolean;
        isRentable: boolean;
        monthlyRent: bigint;
        lastRentPayment: bigint;
        totalRentCollected: bigint;
      }
    ],
    "view"
  >;

  purchasePropertyTokens: TypedContractMethod<
    [propertyId: BigNumberish, tokensToPurchase: BigNumberish],
    [void],
    "payable"
  >;

  rentalEarnings: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  sellOrders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, boolean] & {
        orderId: bigint;
        propertyId: bigint;
        seller: string;
        tokenAmount: bigint;
        pricePerToken: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  sellPropertyTokens: TypedContractMethod<
    [propertyId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPropertyRentStatus: TypedContractMethod<
    [
      propertyId: BigNumberish,
      _isRentable: boolean,
      _monthlyRent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  tokenOwnership: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  withdrawRentalEarnings: TypedContractMethod<
    [propertyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyFromSellOrder"
  ): TypedContractMethod<[orderId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelSellOrder"
  ): TypedContractMethod<[orderId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createProperty"
  ): TypedContractMethod<
    [
      name: string,
      location: string,
      description: string,
      imageURI: string,
      totalCost: BigNumberish,
      totalNumberOfTokens: BigNumberish,
      pricePerToken: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSellOrder"
  ): TypedContractMethod<
    [
      propertyId: BigNumberish,
      tokenAmount: BigNumberish,
      pricePerToken: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllPropertiesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllSellOrders"
  ): TypedContractMethod<[], [RealEstateBuy.SellOrderStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMySellOrders"
  ): TypedContractMethod<[], [RealEstateBuy.SellOrderStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMyTokens"
  ): TypedContractMethod<[propertyId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPropertyDetails"
  ): TypedContractMethod<
    [propertyId: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, bigint, boolean] & {
        name: string;
        location: string;
        description: string;
        imageURI: string;
        totalCost: bigint;
        totalNumberOfTokens: bigint;
        pricePerToken: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPropertyRentalInfo"
  ): TypedContractMethod<
    [propertyId: BigNumberish],
    [
      [boolean, bigint, bigint, bigint] & {
        isRentable: boolean;
        monthlyRent: bigint;
        lastRentPayment: bigint;
        totalRentCollected: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPropertySellOrders"
  ): TypedContractMethod<
    [propertyId: BigNumberish],
    [RealEstateBuy.SellOrderStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRentalEarnings"
  ): TypedContractMethod<[propertyId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "payRent"
  ): TypedContractMethod<[propertyId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "propertiesList"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        propertyId: bigint;
        name: string;
        location: string;
        description: string;
        imageURI: string;
        totalCost: bigint;
        totalNumberOfTokens: bigint;
        pricePerToken: bigint;
        isActive: boolean;
        isRentable: boolean;
        monthlyRent: bigint;
        lastRentPayment: bigint;
        totalRentCollected: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchasePropertyTokens"
  ): TypedContractMethod<
    [propertyId: BigNumberish, tokensToPurchase: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rentalEarnings"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "sellOrders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, boolean] & {
        orderId: bigint;
        propertyId: bigint;
        seller: string;
        tokenAmount: bigint;
        pricePerToken: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sellPropertyTokens"
  ): TypedContractMethod<
    [propertyId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPropertyRentStatus"
  ): TypedContractMethod<
    [
      propertyId: BigNumberish,
      _isRentable: boolean,
      _monthlyRent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenOwnership"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawRentalEarnings"
  ): TypedContractMethod<[propertyId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "PropertyCreated"
  ): TypedContractEvent<
    PropertyCreatedEvent.InputTuple,
    PropertyCreatedEvent.OutputTuple,
    PropertyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyPurchased"
  ): TypedContractEvent<
    PropertyPurchasedEvent.InputTuple,
    PropertyPurchasedEvent.OutputTuple,
    PropertyPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyRentStatusChanged"
  ): TypedContractEvent<
    PropertyRentStatusChangedEvent.InputTuple,
    PropertyRentStatusChangedEvent.OutputTuple,
    PropertyRentStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "PropertySold"
  ): TypedContractEvent<
    PropertySoldEvent.InputTuple,
    PropertySoldEvent.OutputTuple,
    PropertySoldEvent.OutputObject
  >;
  getEvent(
    key: "PropertyUpdated"
  ): TypedContractEvent<
    PropertyUpdatedEvent.InputTuple,
    PropertyUpdatedEvent.OutputTuple,
    PropertyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RentPaid"
  ): TypedContractEvent<
    RentPaidEvent.InputTuple,
    RentPaidEvent.OutputTuple,
    RentPaidEvent.OutputObject
  >;
  getEvent(
    key: "RentWithdrawn"
  ): TypedContractEvent<
    RentWithdrawnEvent.InputTuple,
    RentWithdrawnEvent.OutputTuple,
    RentWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "SellOrderCancelled"
  ): TypedContractEvent<
    SellOrderCancelledEvent.InputTuple,
    SellOrderCancelledEvent.OutputTuple,
    SellOrderCancelledEvent.OutputObject
  >;
  getEvent(
    key: "SellOrderCreated"
  ): TypedContractEvent<
    SellOrderCreatedEvent.InputTuple,
    SellOrderCreatedEvent.OutputTuple,
    SellOrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SellOrderFulfilled"
  ): TypedContractEvent<
    SellOrderFulfilledEvent.InputTuple,
    SellOrderFulfilledEvent.OutputTuple,
    SellOrderFulfilledEvent.OutputObject
  >;

  filters: {
    "PropertyCreated(uint256,string,string,string,string,uint256,uint256,uint256)": TypedContractEvent<
      PropertyCreatedEvent.InputTuple,
      PropertyCreatedEvent.OutputTuple,
      PropertyCreatedEvent.OutputObject
    >;
    PropertyCreated: TypedContractEvent<
      PropertyCreatedEvent.InputTuple,
      PropertyCreatedEvent.OutputTuple,
      PropertyCreatedEvent.OutputObject
    >;

    "PropertyPurchased(uint256,address,uint256)": TypedContractEvent<
      PropertyPurchasedEvent.InputTuple,
      PropertyPurchasedEvent.OutputTuple,
      PropertyPurchasedEvent.OutputObject
    >;
    PropertyPurchased: TypedContractEvent<
      PropertyPurchasedEvent.InputTuple,
      PropertyPurchasedEvent.OutputTuple,
      PropertyPurchasedEvent.OutputObject
    >;

    "PropertyRentStatusChanged(uint256,bool,uint256)": TypedContractEvent<
      PropertyRentStatusChangedEvent.InputTuple,
      PropertyRentStatusChangedEvent.OutputTuple,
      PropertyRentStatusChangedEvent.OutputObject
    >;
    PropertyRentStatusChanged: TypedContractEvent<
      PropertyRentStatusChangedEvent.InputTuple,
      PropertyRentStatusChangedEvent.OutputTuple,
      PropertyRentStatusChangedEvent.OutputObject
    >;

    "PropertySold(uint256,address,uint256)": TypedContractEvent<
      PropertySoldEvent.InputTuple,
      PropertySoldEvent.OutputTuple,
      PropertySoldEvent.OutputObject
    >;
    PropertySold: TypedContractEvent<
      PropertySoldEvent.InputTuple,
      PropertySoldEvent.OutputTuple,
      PropertySoldEvent.OutputObject
    >;

    "PropertyUpdated(uint256,string,string,string,string,uint256,uint256,uint256)": TypedContractEvent<
      PropertyUpdatedEvent.InputTuple,
      PropertyUpdatedEvent.OutputTuple,
      PropertyUpdatedEvent.OutputObject
    >;
    PropertyUpdated: TypedContractEvent<
      PropertyUpdatedEvent.InputTuple,
      PropertyUpdatedEvent.OutputTuple,
      PropertyUpdatedEvent.OutputObject
    >;

    "RentPaid(uint256,uint256)": TypedContractEvent<
      RentPaidEvent.InputTuple,
      RentPaidEvent.OutputTuple,
      RentPaidEvent.OutputObject
    >;
    RentPaid: TypedContractEvent<
      RentPaidEvent.InputTuple,
      RentPaidEvent.OutputTuple,
      RentPaidEvent.OutputObject
    >;

    "RentWithdrawn(uint256,address,uint256)": TypedContractEvent<
      RentWithdrawnEvent.InputTuple,
      RentWithdrawnEvent.OutputTuple,
      RentWithdrawnEvent.OutputObject
    >;
    RentWithdrawn: TypedContractEvent<
      RentWithdrawnEvent.InputTuple,
      RentWithdrawnEvent.OutputTuple,
      RentWithdrawnEvent.OutputObject
    >;

    "SellOrderCancelled(uint256)": TypedContractEvent<
      SellOrderCancelledEvent.InputTuple,
      SellOrderCancelledEvent.OutputTuple,
      SellOrderCancelledEvent.OutputObject
    >;
    SellOrderCancelled: TypedContractEvent<
      SellOrderCancelledEvent.InputTuple,
      SellOrderCancelledEvent.OutputTuple,
      SellOrderCancelledEvent.OutputObject
    >;

    "SellOrderCreated(uint256,uint256,address,uint256,uint256)": TypedContractEvent<
      SellOrderCreatedEvent.InputTuple,
      SellOrderCreatedEvent.OutputTuple,
      SellOrderCreatedEvent.OutputObject
    >;
    SellOrderCreated: TypedContractEvent<
      SellOrderCreatedEvent.InputTuple,
      SellOrderCreatedEvent.OutputTuple,
      SellOrderCreatedEvent.OutputObject
    >;

    "SellOrderFulfilled(uint256,address,uint256)": TypedContractEvent<
      SellOrderFulfilledEvent.InputTuple,
      SellOrderFulfilledEvent.OutputTuple,
      SellOrderFulfilledEvent.OutputObject
    >;
    SellOrderFulfilled: TypedContractEvent<
      SellOrderFulfilledEvent.InputTuple,
      SellOrderFulfilledEvent.OutputTuple,
      SellOrderFulfilledEvent.OutputObject
    >;
  };
}
